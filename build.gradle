/*
 * Copyright 2020 - present Maksym Ostroverkhov.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "com.palantir.git-version"
    id "com.github.ben-manes.versions"
    id "com.github.sherter.google-java-format" apply false
    id "io.spring.dependency-management" apply false
    id "com.google.protobuf" apply false
}

description = "jauntsdn-messagestreams: virtual threads demonstration"

apply from: "gradle/dependency-management.gradle"

allprojects {
    dependencyLocking {
        lockAllConfigurations()
    }
}

subprojects {
    apply plugin: "java-library"
    apply plugin: "com.github.sherter.google-java-format"
    apply plugin: "com.google.osdetector"

    version = projectVersion(project)

    println "Building module ${name}:${version}"

    repositories {
        mavenCentral()
        mavenLocal()
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs += "--enable-preview"
    }

    tasks.withType(JavaExec) {
        jvmArgs += ["--enable-preview"]
    }

    plugins.withType(JavaPlugin) {

        compileJava {
            dependsOn "googleJavaFormat"
        }
    }

    googleJavaFormat {
        toolVersion = "1.6"
        exclude "**/generated"
    }
}

task printProjectVersion {
    doLast {
        println "Project version: ${projectVersion(project)}"
    }
}

def projectVersion(project) {
    def versionSuffix = ""
    def gitBranchName = versionDetails().branchName
    def branchName = gitBranchName ?: project.findProperty("branch")
    if (branchName != null) {
        if (branchName == "develop") {
            versionSuffix = "-SNAPSHOT"
        } else if (branchName.startsWith("feature")) {
            versionSuffix = "-${branchName.replace("/", "-")}-SNAPSHOT"
        }
    }
    return project.version + versionSuffix
}

defaultTasks "clean", "build"